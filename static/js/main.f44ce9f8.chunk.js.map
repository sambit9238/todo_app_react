{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setTodos","todos","setInputText","inputText","setFilter","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","eachTodoText","eachTodo","filteredTodos","map","item","filter","el","TodoList","key","App","useState","JSON","parse","localStorage","getItem","setFilteredTodos","currentDate","setCurrentDate","useEffect","setItem","stringify","moment","format","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAyCeA,EAvCF,SAAC,GAIkB,IAJjBC,EAIgB,EAJhBA,SACCC,EAGe,EAHfA,MACAC,EAEe,EAFfA,aACAC,EACe,EADfA,UACAC,EAAe,EAAfA,UAgBZ,OACI,8BACI,2BAAOC,MAAOF,EACdG,SAlBiB,SAACC,GACtBL,EAAaK,EAAEC,OAAOH,QAkBlBI,KAAK,OAAOC,UAAU,eACtB,4BAAQC,QAjBU,SAACJ,GACvBA,EAAEK,iBACFZ,EAAS,GAAD,mBACDC,GADC,CACM,CAACY,KAAMV,EACLW,WAAW,EACfC,GAAoB,IAAhBC,KAAKC,aAErBf,EAAa,KAU2BQ,UAAU,cAAcD,KAAK,UAC7D,uBAAGC,UAAU,wBAEjB,yBAAKA,UAAU,UACX,4BAAQJ,SAZE,SAACC,GACnBH,EAAUG,EAAEC,OAAOH,QAWsBa,KAAK,QAAQR,UAAU,eACpD,4BAAQL,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,mB,OCNLc,EA1BF,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,aAAcC,EAA8C,EAA9CA,SAAUpB,EAAoC,EAApCA,MAAOD,EAA6B,EAA7BA,SAA6B,EAAnBsB,cAapD,OACI,yBAAKZ,UAAU,QACX,wBAAIA,UAAS,oBAAeW,EAASP,UAAY,YAAa,KAAQM,GACtE,4BAAQT,QAZQ,WACpBX,EAASC,EAAMsB,KAAI,SAACC,GAChB,OAAIA,EAAKT,KAAOM,EAASN,GACrB,2BACOS,GADP,IACaV,WAAYU,EAAKV,YAG3BU,OAK2Bd,UAAU,gBAC1C,uBAAGA,UAAU,kBAEf,4BAAQC,QAlBM,WAClBX,EAASC,EAAMwB,QAAO,SAACC,GAAD,OAAQA,EAAGX,KAAOM,EAASN,QAiBbL,UAAU,gBAC1C,uBAAGA,UAAU,oBCEViB,EArBE,SAAC,GAAuC,IAArC1B,EAAoC,EAApCA,MAAOD,EAA6B,EAA7BA,SAAUsB,EAAmB,EAAnBA,cACjC,OACI,yBAAKZ,UAAU,kBACX,wBAAIA,UAAU,aAENY,EAAcC,KACV,SAACF,GAAD,OACI,kBAAC,EAAD,CACIO,IAAKP,EAASN,GACdK,aAAcC,EAASR,KACvBQ,SAAUA,EACVpB,MAAOA,EACPD,SAAUA,EACVsB,cAAeA,UCqChCO,MA/Cf,WAAe,MAEqBC,mBAAS,IAF9B,mBAEN3B,EAFM,KAEKD,EAFL,OAGa4B,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,CAAC,KAHpE,mBAGNjC,EAHM,KAGCD,EAHD,OAIe8B,mBAAS,OAJxB,mBAINL,EAJM,KAIErB,EAJF,OAK6B0B,mBAAS7B,GALtC,mBAKNqB,EALM,KAKSa,EALT,OAMyBL,mBAAS,IANlC,mBAMNM,EANM,KAMOC,EANP,KAiCb,OAVAC,qBAAU,WAbNH,EADa,QAAXV,EACexB,EACG,cAAXwB,EACQxB,EAAMwB,QAAO,SAACC,GAAD,OAAyB,IAAjBA,EAAGZ,aAExBb,EAAMwB,QAAO,SAACC,GAAD,OAAyB,IAAjBA,EAAGZ,cAK3CmB,aAAaM,QAAQ,QAASR,KAAKS,UAAUvC,MAO5C,CAACA,EAAOwB,IAEXa,qBAAU,WAERD,EAAeI,MAASC,OAAO,iBAC9B,IAGD,yBAAKhC,UAAU,OACb,gCACE,2CAEF,0CAAgB0B,EAAhB,KACA,kBAAC,EAAD,CAAMpC,SAAUA,EAAUC,MAAOA,EAC3BC,aAAcA,EAAcC,UAAWA,EACvCC,UAAWA,IACjB,kBAAC,EAAD,CAAUH,MAAOA,EAAOD,SAAUA,EAAUsB,cAAeA,MCpC7CqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f44ce9f8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({setTodos,\n                todos,\n                setInputText,\n                inputText,\n                setFilter}) => {\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);\n    }\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n        setTodos([\n            ...todos, {text: inputText,\n                        completed: false,\n                    id: Math.random() * 100}\n        ]);\n        setInputText(\"\");\n    }\n    const filterHandler = (e) => {\n        setFilter(e.target.value);\n    }\n    return (\n        <form>\n            <input value={inputText}\n            onChange={inputTextHandler} \n            type=\"text\" className=\"todo-input\" />\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n                <i className=\"fas fa-plus-square\"></i>\n            </button>\n            <div className=\"select\">\n                <select onChange={filterHandler} name=\"todos\" className=\"filter-todo\">\n                    <option value=\"all\">All</option>\n                    <option value=\"completed\">Completed</option>\n                    <option value=\"uncompleted\">Uncompleted</option>\n                </select>\n            </div>\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\n\nconst Todo = ({eachTodoText, eachTodo, todos, setTodos, filteredTodos}) => {\n    const deleteHandler = () => {\n        setTodos(todos.filter((el) => el.id !== eachTodo.id))\n    };\n    const completeHandler = () => {\n        setTodos(todos.map((item) => {\n            if (item.id === eachTodo.id){\n                return{\n                    ...item, completed: !item.completed\n                };\n            } \n            return item;\n        }))};\n    return(\n        <div className='todo'>\n            <li className={`todo-item ${eachTodo.completed ? \"completed\": \"\" }`}>{eachTodoText}</li>\n            <button onClick={completeHandler} className='complete-btn'>\n              <i className=\"fas fa-check\"></i>\n            </button>\n            <button onClick={deleteHandler} className='complete-btn'>\n            <i className=\"fas fa-trash\"></i>\n            </button>\n        </div>\n    );\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos}) => {\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {\n                    filteredTodos.map(\n                        (eachTodo) => (\n                            <Todo \n                                key={eachTodo.id}\n                                eachTodoText={eachTodo.text}\n                                eachTodo={eachTodo}\n                                todos={todos}\n                                setTodos={setTodos}\n                                filteredTodos={filteredTodos}/>\n                        ))\n                }\n            </ul>\n        </div>\n    )\n}\n\nexport default TodoList;","import React, {useState, useEffect} from 'react';\nimport moment from \"moment\";\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  //states\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState(JSON.parse(localStorage.getItem('todos')) || [{}]);\n  const [filter, setFilter] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState(todos);\n  const [currentDate, setCurrentDate] = useState('');\n  //function\n  const updateFilter = () => {\n    if (filter === 'all') {\n      setFilteredTodos(todos);\n    } else if (filter === 'completed') {\n      setFilteredTodos(todos.filter((el) => el.completed === true));\n    } else {\n      setFilteredTodos(todos.filter((el) => el.completed !== true));\n    }\n  };\n\n  const setLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  };\n\n  //useEffect\n  useEffect(() =>{\n    updateFilter();\n    setLocalTodos();\n  }, [todos, filter]);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    setCurrentDate(moment().format(\"DD-MM-YYYY\"));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Hello Sam!</h1>\n      </header>\n      <h2>What's for {currentDate}?</h2>\n      <Form setTodos={setTodos} todos={todos}\n            setInputText={setInputText} inputText={inputText}\n            setFilter={setFilter}/>\n      <TodoList todos={todos} setTodos={setTodos} filteredTodos={filteredTodos}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}